version: '3.8'

services:
  userservice_db:
    image: postgres:latest
    container_name: userservice_postgres
    environment:
      POSTGRES_USER: userservice
      POSTGRES_PASSWORD: userservicepass
      POSTGRES_DB: userservicedb
    volumes:
      - userservice_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - user_service_network

  userservice:
    build: ./UserService
    container_name: userservice
    depends_on:
      kafka:
        condition: service_healthy
      userservice_db:
        condition: service_started
    ports:
      - "5001:5001"
    networks:
      - proxy_network
      - user_service_network
      - kafka_network
    volumes:
      - ./Broker/kafka_producer.py:/UserService/kafka_producer.py

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    environment:
      - CLICKHOUSE_DB=social_network
      - CLICKHOUSE_USER=stats_user
      - CLICKHOUSE_PASSWORD=stats_password
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    ports:
      - "8123:8123"
      - "14444:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - stats_service_network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  statistics_service:
    build: ./StatisticsService
    container_name: statistics_service
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "50052:50052"
    networks:
      - stats_service_network
      - kafka_network
      - proxy_network

  postservice_db:
    image: postgres:latest
    container_name: postservice_postgres
    environment:
      POSTGRES_USER: postservice
      POSTGRES_PASSWORD: postservicepass
      POSTGRES_DB: postservicedb
    volumes:
      - postservice_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - post_service_network

  post_service:
    build: ./PostService
    container_name: post_service
    depends_on:
      kafka:
        condition: service_healthy
      postservice_db:
        condition: service_started
    environment:
      - DATABASE_USER=postservice
      - DATABASE_PASSWORD=postservicepass
      - DATABASE_HOST=postservice_db
      - DATABASE_PORT=5432
      - DATABASE_NAME=postservicedb
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50051
    ports:
      - "50051:50051"
    networks:
      - proxy_network
      - post_service_network
      - kafka_network
    volumes:
      - ./Broker/kafka_producer.py:/PostService/kafka_producer.py

  proxyservice:
    build: ./APIGateway
    container_name: proxyservice
    ports:
      - "5000:5000"
    networks:
      - proxy_network
      - user_service_network
      - post_service_network
      - kafka_network
    depends_on:
      userservice:
        condition: service_started
      post_service:
        condition: service_started
      kafka:
        condition: service_healthy
    volumes:
      - ./Broker/kafka_producer.py:/APIGateway/kafka_producer.py

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - kafka_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka_network
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-setup:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-setup
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        cub kafka-ready -b kafka:29092 1 30 &&
        echo 'Creating topics...' &&
        kafka-topics --create --if-not-exists --topic registration_events --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic like_click_events --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic view_events --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic comment_events --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        echo 'Topics created successfully'
      "
    networks:
      - kafka_network

  tests:
    build: ./tests
    container_name: tests
    networks:
      - proxy_network
    depends_on:
      proxyservice:
        condition: service_started

networks:
  post_service_network:
    driver: bridge
  user_service_network:
    driver: bridge
  proxy_network:
    driver: bridge
  kafka_network:
    driver: bridge
  stats_service_network:
    driver: bridge

volumes:
  userservice_postgres_data:
  postservice_postgres_data:
  clickhouse_data:
